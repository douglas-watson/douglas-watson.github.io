<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming notes</title>
    <link>http://douglas-watson.github.io/</link>
    <description>Recent content on Programming notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Mar 2018 08:12:00 +0100</lastBuildDate>
    
	<atom:link href="http://douglas-watson.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>An interactive map of mass shootings based on Shiny</title>
      <link>http://douglas-watson.github.io/post/2018-03_mass-shootings/</link>
      <pubDate>Thu, 15 Mar 2018 08:12:00 +0100</pubDate>
      
      <guid>http://douglas-watson.github.io/post/2018-03_mass-shootings/</guid>
      <description>&amp;ldquo;Four? That&amp;rsquo;s barely your average family murder-suicide!&amp;rdquo; - Anonymous American
 The United States saw 427 mass shootings in 2017, making a total of 2571 victims. That&amp;rsquo;s more than one shooting per day.
Why don&amp;rsquo;t you hear about them on the news every day? Or conversely, if they are so common, why did the recent shooting in Las Vegas or the night club shooting in Orlando get so much attention?</description>
    </item>
    
    <item>
      <title>How to add Google Analytics to a Shiny application</title>
      <link>http://douglas-watson.github.io/post/2018-02_shiny_google_analytics/</link>
      <pubDate>Wed, 21 Feb 2018 22:00:00 +0100</pubDate>
      
      <guid>http://douglas-watson.github.io/post/2018-02_shiny_google_analytics/</guid>
      <description>I recently wanted to add a Google Analytics tracker to a Shiny dashboard, and I found that the official documentation doesn&amp;rsquo;t explain how to include &amp;ldquo;Global Site Tag&amp;rdquo; tracking code, which seems to be the current default setting in Analytics. The process is simple, we just have to include the tracking code as an HTML snippet in ui.R. The process requires only two steps:
 Copy the analytics HTML snippet into a text file Reference the file in ui.</description>
    </item>
    
    <item>
      <title>How to change the number of breaks on a datetime axis with R and ggplot2</title>
      <link>http://douglas-watson.github.io/post/2017-05_ggplot_datetime/</link>
      <pubDate>Sat, 06 May 2017 07:33:58 +0200</pubDate>
      
      <guid>http://douglas-watson.github.io/post/2017-05_ggplot_datetime/</guid>
      <description>It took me a surprising amount of time to find how to change the tick interval on ggplot2 datetime axes, without manually specifying the date of each position. The solution is surprisingly simple and clear once you know the syntax:
scale_x_datetime(date_breaks = &amp;quot;12 hours&amp;quot;)  This places a break every 12 hours. The interval can be any value accepted by the scales package: &amp;ldquo;sec&amp;rdquo;, &amp;ldquo;min&amp;rdquo;, &amp;ldquo;hour&amp;rdquo;, &amp;ldquo;day&amp;rdquo;, &amp;ldquo;week&amp;rdquo;, &amp;ldquo;month&amp;rdquo;, or &amp;ldquo;year&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Swiss parliament transcriptions</title>
      <link>http://douglas-watson.github.io/projects/parliament/</link>
      <pubDate>Sun, 27 Dec 2015 16:15:13 +0100</pubDate>
      
      <guid>http://douglas-watson.github.io/projects/parliament/</guid>
      <description>https://github.com/douglas-watson/parl-scraping
With a team of fellow hackers during the OpenData Election Hackdays, and in partnership with the newspaper Le Temps, we compiled a full-text-searchable index of the transcriptions of all parliamentary interventions of the Swiss government, since 1990. The result can be browsed online at parlement.letemps.ch.
The core of the project is a web scraper, which retrieved all the transcriptions from the official Swiss website, and combined the transcription with biographical information about the speakers (moslty party affiliations and canton of origin).</description>
    </item>
    
    <item>
      <title>The MIT License (MIT)</title>
      <link>http://douglas-watson.github.io/license/</link>
      <pubDate>Sun, 27 Dec 2015 16:15:13 +0100</pubDate>
      
      <guid>http://douglas-watson.github.io/license/</guid>
      <description>Copyright © 2015-2016 Douglas C. Watson
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</description>
    </item>
    
    <item>
      <title>Build an internet-of-things dashboard with Google Sheets and RStudio Shiny: Tutorial part 3/3</title>
      <link>http://douglas-watson.github.io/post/gdocs_3_shiny/</link>
      <pubDate>Sun, 27 Dec 2015 13:21:42 +0100</pubDate>
      
      <guid>http://douglas-watson.github.io/post/gdocs_3_shiny/</guid>
      <description>This is the third and final part of the Shiny + Google Docs dashboard tutorial, where I explain how to build a live web dashboard for connected &amp;ldquo;Internet of Things&amp;rdquo; sensors, using Google Sheets as a data server. Part one covered setting up a Google Sheet to store and serve data through HTTP requests; part two covered reading, filtering, and plotting that data in R. In this part, we&amp;rsquo;ll create the actual dashboard and host it online.</description>
    </item>
    
    <item>
      <title>Build an internet-of-things dashboard with Google Sheets and RStudio Shiny: Tutorial part 2/3</title>
      <link>http://douglas-watson.github.io/post/gdocs_2_r/</link>
      <pubDate>Sun, 27 Dec 2015 13:21:38 +0100</pubDate>
      
      <guid>http://douglas-watson.github.io/post/gdocs_2_r/</guid>
      <description>This is the second installment of the Shiny + GDocs dashboard tutorial, where we learn how to use a Google Sheet spreadsheet to store data from connected &amp;ldquo;Internet of Things&amp;rdquo; data and use Shiny to create a web page to show the data. The first part showed you how to set up a Google Sheet to serve as a data server that accepts POST and GET HTTP requests, as well as how to use pivot tables and filters on the sheets directly.</description>
    </item>
    
    <item>
      <title>Build an internet-of-things dashboard with Google Sheets and RStudio Shiny: Tutorial part 1/3</title>
      <link>http://douglas-watson.github.io/post/gdocs_1_gdocs/</link>
      <pubDate>Sun, 27 Dec 2015 13:21:30 +0100</pubDate>
      
      <guid>http://douglas-watson.github.io/post/gdocs_1_gdocs/</guid>
      <description>In part one of this tutorial, you will learn how to script a Google Sheet to store data from your hardware using an HTTP POST request and to retrieve the sheet&amp;rsquo;s data using an HTTP GET requests. Along the way, you will also experiment with some of the spreadsheet&amp;rsquo;s built-in analytics tools: filters, pivot tables, and charts.
Skip to part 2 to learn how to fetch and manipulate this data in R, or part 3 to learn how to use Shiny.</description>
    </item>
    
    <item>
      <title>Build an internet-of-things dashboard with Google Sheets and RStudio Shiny: Tutorial Series.</title>
      <link>http://douglas-watson.github.io/post/gdocs_0_intro/</link>
      <pubDate>Sun, 27 Dec 2015 13:21:24 +0100</pubDate>
      
      <guid>http://douglas-watson.github.io/post/gdocs_0_intro/</guid>
      <description>Logging data to a central server and displaying it online is a common task in Internet of Things applications. This usually requires deploying and maintaining your own servers, with a database for storage and a web server for display. System administration tasks are no fun to me, so instead I found a way to use Google Sheets as a server, and ShinyApps.io as a visualization platform. Uploading data to Google docs is relatively simple and well documented, but connecting Shiny to Google Docs was a little more tricky; this motivated me to write this tutorial to show others how to set up a similar system.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://douglas-watson.github.io/about/</link>
      <pubDate>Sun, 27 Dec 2015 13:01:07 +0100</pubDate>
      
      <guid>http://douglas-watson.github.io/about/</guid>
      <description>I look after software development for a hardware startup. I frequently code in Python and Go, and sometimes in R, Javascript, and MATLAB.
I&amp;rsquo;ve often found other developers blogs to be useful resources, so I set up my own to share some tips and tricks, and solutions to problems that didn&amp;rsquo;t have obvious solutions.</description>
    </item>
    
  </channel>
</rss>